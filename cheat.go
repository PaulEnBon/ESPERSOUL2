package main

import (
	"fmt"
)

// Activer/d√©sactiver les cheats (mettre true pour tester). L'ouverture se fait avec la touche 'k'.
// Mettre √† false avant de distribuer le jeu.
var debugMode = true

// God mode: rend le joueur invincible (√† impl√©menter dans calcul des d√©g√¢ts combat si besoin)
var godMode = false

// Menu de cheats d√©clench√© par la touche 'c' dans la boucle de jeu
func showCheatMenu(currentMap *string, mapData *[][]int) {
	if globalKeyEvents == nil {
		return
	}
	for {
		fmt.Println("\n===== CHEAT MENU =====")
		fmt.Println("1. Donner l'objet sp√©cial (sida)")
		fmt.Println("2. Aller directement en salle15")
		fmt.Println("3. Faire appara√Ætre le boss salle15 maintenant")
		fmt.Println("4. Soigner compl√®tement le joueur")
		fmt.Println("5. Ajouter 500 pi√®ces")
		fmt.Println("6. Tuer instantan√©ment le boss (flag vaincu)")
		fmt.Println("7. Toggle God Mode (invincibilit√© en combat)")
		fmt.Println("8. +1 Niveau joueur (augmente stats de base)")
		fmt.Println("9. Donner un lot de potions (mineure/majeure/supr√™me x5)")
		fmt.Println("a. T√©l√©portation salle1")
		fmt.Println("b. Reset progression s√©quence cheat (cheatProgress=0)")
		fmt.Println("c. Donner Puff 9K (+1 boost attaque)")
		fmt.Println("d. Booster attack x2 (bonus temporaire)")
		fmt.Println("e. Apparaitre PNJ soigneur (pose un code tile)")
		fmt.Println("q. Quitter le menu")
		fmt.Print("Choix: ")
		ev := <-globalKeyEvents
		c := ev.Rune
		if c >= 'A' && c <= 'Z' {
			c += 32
		}
		switch c {
		case '1':
			addToInventory("sida", 1)
			addHUDMessage("üß™ Cheat: objet 'sida' ajout√©.")
		case '2':
			*currentMap = "salle15"
			*mapData = copyMap(salles[*currentMap])
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 3, 6)
			addHUDMessage("üó∫Ô∏è Cheat: t√©l√©port√© en salle15.")
		case '3':
			if *currentMap == "salle15" {
				(*mapData)[3][3] = 78
				addHUDMessage("üëπ Cheat: Boss final invoqu√©.")
			} else {
				addHUDMessage("‚ö†Ô∏è Pas en salle15.")
			}
		case '4':
			currentPlayer.PV = currentPlayer.PVMax
			addHUDMessage("‚ù§Ô∏è Cheat: PV restaur√©s.")
		case '5':
			addToInventory("pi√®ces", 500)
			addHUDMessage("üí∞ Cheat: +500 pi√®ces.")
		case '6':
			if *currentMap == "salle15" {
				if cfg, ok := bossRooms["salle15"]; ok {
					cfg.state.bossDefeated = true
					addHUDMessage("üíÄ Cheat: Boss marqu√© vaincu.")
				}
			} else {
				addHUDMessage("‚ö†Ô∏è Pas en salle15.")
			}
		case '7':
			// Toggle d'un flag global de god mode (ajouter variable si inexistante)
			godMode = !godMode
			if godMode {
				addHUDMessage("üõ°Ô∏è God Mode ACTIV√â")
			} else {
				addHUDMessage("üõ°Ô∏è God Mode d√©sactiv√©")
			}
		case '8':
			// Simule un gain de niveau : on augmente quelques stats basiques
			currentPlayer.PVMax += 5
			currentPlayer.PV = currentPlayer.PVMax
			currentPlayer.Armure += 1
			currentPlayer.ResistMag += 1
			currentPlayer.Precision += 0.01
			currentPlayer.TauxCritique += 0.01
			addHUDMessage("üìà Gain simul√©: +5 PVMax, +1 Armure, +1 RM, +1% Prec & Crit")
		case '9':
			addToInventory("potion_mineure", 5)
			addToInventory("potion_majeure", 5)
			addToInventory("potion_supreme", 5)
			addHUDMessage("üß™ Pack potions ajout√© x5 chacun")
		case 'a':
			*currentMap = "salle1"
			*mapData = copyMap(salles[*currentMap])
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üö™ T√©l√©port√© salle1")
		case 'b':
			cheatProgress = 0
			addHUDMessage("‚ôªÔ∏è S√©quence cheat reset")
		case 'c':
			addToInventory("puff_9k", 1)
			playerStats.attackBoost += 15
			addHUDMessage("üíä Puff 9K ajout√© (+15% attaque)")
		case 'd':
			playerStats.attackBoost += 100
			addHUDMessage("‚öîÔ∏è Attack boost massif (+100%)")
		case 'e':
			// On place un PNJ soigneur cod√© 90 (valeur arbitraire libre si non utilis√©e)
			// On v√©rifie la taille avant de poser
			if len(*mapData) > 4 && len((*mapData)[4]) > 4 {
				(*mapData)[4][4] = 90
				addHUDMessage("üöë PNJ soigneur apparu (4,4)")
			} else {
				addHUDMessage("‚ö†Ô∏è Carte trop petite pour PNJ soigneur")
			}
		case 'q':
			addHUDMessage("Fermeture cheat menu.")
			return
		default:
			addHUDMessage("Entr√©e invalide cheat.")
		}
		// Mettre √† jour refs globales
		currentMapGlobalRef = *currentMap
		mapDataGlobalRef = *mapData
	}
}
