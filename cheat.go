package main

import (
	"fmt"
	"strings"

	"github.com/eiannone/keyboard"
)

// Activer/d√©sactiver les cheats (mettre true pour tester). L'ouverture se fait avec la touche 'k'.
// Mettre √† false avant de distribuer le jeu.
var debugMode = true

// God mode: rend le joueur invincible (√† impl√©menter dans calcul des d√©g√¢ts combat si besoin)
var godMode = false

// Menu de cheats d√©clench√© par la touche 'c' dans la boucle de jeu
func showCheatMenu(currentMap *string, mapData *[][]int) {
	if globalKeyEvents == nil {
		return
	}
	// Helper: read a line of text from keyboard events until Enter
	readLine := func() string {
		var b strings.Builder
		for {
			ev := <-globalKeyEvents
			// Drain burst
			draining := true
			for draining {
				select {
				case next := <-globalKeyEvents:
					ev = next
				default:
					draining = false
				}
			}
			if ev.Key == keyboard.KeyEnter { // finish
				break
			}
			if ev.Key == keyboard.KeyBackspace || ev.Rune == 127 {
				s := b.String()
				if len(s) > 0 {
					// remove last rune
					rs := []rune(s)
					rs = rs[:len(rs)-1]
					b.Reset()
					b.WriteString(string(rs))
					// simple backspace visual
					fmt.Print("\b \b")
				}
				continue
			}
			r := ev.Rune
			if r >= 'A' && r <= 'Z' {
				r = r + 32
			}
			// accept letters, digits, underscore
			if (r >= 'a' && r <= 'z') || (r >= '0' && r <= '9') || r == '_' {
				b.WriteRune(r)
				fmt.Printf("%c", r)
			}
		}
		fmt.Println()
		return strings.TrimSpace(b.String())
	}
	for {
		fmt.Println("\n===== CHEAT MENU =====")
		fmt.Println("1. Donner l'objet sp√©cial (sida)")
		fmt.Println("2. Aller directement en salle15")
		fmt.Println("3. Faire appara√Ætre le boss salle15 maintenant")
		fmt.Println("4. Soigner compl√®tement le joueur")
		fmt.Println("5. Ajouter 500 pi√®ces")
		fmt.Println("6. Tuer instantan√©ment le boss (flag vaincu)")
		fmt.Println("7. Toggle God Mode (invincibilit√© en combat)")
		fmt.Println("8. +1 Niveau joueur (augmente stats de base)")
		fmt.Println("9. Donner un lot de potions (mineure/majeure/supr√™me x5)")
		fmt.Println("a. T√©l√©portation salle1")
		fmt.Println("b. Reset progression s√©quence cheat (cheatProgress=0)")
		fmt.Println("c. Donner Puff 9K (+1 boost attaque)")
		fmt.Println("d. Booster attack x2 (bonus temporaire)")
		fmt.Println("e. Apparaitre PNJ soigneur (pose un code tile)")
		fmt.Println("f. Toggle rendu ASCII/Emoji")
		fmt.Println("g. Donner une Hache (coupe les arbres)")
		fmt.Println("h. Placer un arbre √† droite du joueur")
		fmt.Println("i. Couper/enlever l'arbre √† droite du joueur")
		fmt.Println("j. TP salle4 (Marchand)")
		fmt.Println("k. TP salle5 (Forgeron)")
		fmt.Println("l. TP salle7 (Casino)")
		fmt.Println("m. TP salle12 (Mini-boss)")
		fmt.Println("n. TP salle13")
		fmt.Println("o. TP salle14")
		fmt.Println("p. +20 Roches d'√©volution")
		fmt.Println("t. TP vers salle par nom (ex: salle1..salle15)")
		fmt.Println("w. Lister les salles disponibles")
		fmt.Println("q. Quitter le menu")
		fmt.Print("Choix: ")
		ev := <-globalKeyEvents
		c := ev.Rune
		if c >= 'A' && c <= 'Z' {
			c += 32
		}
		switch c {
		case '1':
			addToInventory("sida", 1)
			addHUDMessage("üß™ Cheat: objet 'sida' ajout√©.")
		case '2':
			*currentMap = "salle15"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 3, 6)
			addHUDMessage("üó∫Ô∏è Cheat: t√©l√©port√© en salle15.")
		case '3':
			if *currentMap == "salle15" {
				(*mapData)[3][3] = 78
				addHUDMessage("üëπ Cheat: Boss final invoqu√©.")
			} else {
				addHUDMessage("‚ö†Ô∏è Pas en salle15.")
			}
		case '4':
			currentPlayer.PV = currentPlayer.PVMax
			addHUDMessage("‚ù§Ô∏è Cheat: PV restaur√©s.")
		case '5':
			addToInventory("pi√®ces", 500)
			addHUDMessage("üí∞ Cheat: +500 pi√®ces.")
		case '6':
			if *currentMap == "salle15" {
				if cfg, ok := bossRooms["salle15"]; ok {
					cfg.state.bossDefeated = true
					addHUDMessage("üíÄ Cheat: Boss marqu√© vaincu.")
				}
			} else {
				addHUDMessage("‚ö†Ô∏è Pas en salle15.")
			}
		case '7':
			// Toggle d'un flag global de god mode (ajouter variable si inexistante)
			godMode = !godMode
			if godMode {
				addHUDMessage("üõ°Ô∏è God Mode ACTIV√â")
			} else {
				addHUDMessage("üõ°Ô∏è God Mode d√©sactiv√©")
			}
		case '8':
			// Simule un gain de niveau : on augmente quelques stats basiques
			currentPlayer.PVMax += 5
			currentPlayer.PV = currentPlayer.PVMax
			currentPlayer.Armure += 1
			currentPlayer.ResistMag += 1
			currentPlayer.Precision += 0.01
			currentPlayer.TauxCritique += 0.01
			addHUDMessage("üìà Gain simul√©: +5 PVMax, +1 Armure, +1 RM, +1% Prec & Crit")
		case '9':
			addToInventory("potion_mineure", 5)
			addToInventory("potion_majeure", 5)
			addToInventory("potion_supreme", 5)
			addHUDMessage("üß™ Pack potions ajout√© x5 chacun")
		case 'a':
			*currentMap = "salle1"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üö™ T√©l√©port√© salle1")
		case 'b':
			cheatProgress = 0
			addHUDMessage("‚ôªÔ∏è S√©quence cheat reset")
		case 'c':
			addToInventory("puff_9k", 1)
			playerStats.attackBoost += 15
			addHUDMessage("üíä Puff 9K ajout√© (+15% attaque)")
		case 'd':
			playerStats.attackBoost += 100
			addHUDMessage("‚öîÔ∏è Attack boost massif (+100%)")
		case 'e':
			// On place un PNJ soigneur cod√© 90 (valeur arbitraire libre si non utilis√©e)
			// On v√©rifie la taille avant de poser
			if len(*mapData) > 4 && len((*mapData)[4]) > 4 {
				(*mapData)[4][4] = 90
				addHUDMessage("üöë PNJ soigneur apparu (4,4)")
			} else {
				addHUDMessage("‚ö†Ô∏è Carte trop petite pour PNJ soigneur")
			}
		case 'f':
			useASCII = !useASCII
			if useASCII {
				addHUDMessage("üî§ Rendu ASCII activ√©")
			} else {
				addHUDMessage("üñºÔ∏è Rendu Emoji activ√©")
			}
		case 'g':
			addToInventory("hache", 1)
			addHUDMessage("ü™ì Cheat: Hache ajout√©e")
		case 'h':
			// Place un arbre √† droite du joueur si libre
			px, py := findPlayer(*mapData)
			x, y := px+1, py
			if y >= 0 && y < len(*mapData) && x >= 0 && x < len((*mapData)[0]) {
				if (*mapData)[y][x] == 0 { // sol vide
					PlaceTreeImmediate(*currentMap, *mapData, x, y)
					addHUDMessage("üå≥ Arbre plac√© √† droite")
				} else {
					addHUDMessage("‚ö†Ô∏è Case non vide √† droite")
				}
			}
		case 'i':
			// Coupe/enl√®ve un arbre √† droite du joueur
			px, py := findPlayer(*mapData)
			x, y := px+1, py
			if y >= 0 && y < len(*mapData) && x >= 0 && x < len((*mapData)[0]) {
				if (*mapData)[y][x] == TileTree {
					RemoveTree(*currentMap, x, y)
					MarkTreeCut(*currentMap, x, y)
					(*mapData)[y][x] = 0
					addHUDMessage("ü™ì Arbre enlev√© √† droite")
				} else {
					addHUDMessage("‚ö†Ô∏è Pas d'arbre √† droite")
				}
			}
		case 'j':
			*currentMap = "salle4"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üõí TP salle4 (Marchand)")
		case 'k':
			*currentMap = "salle5"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("‚öíÔ∏è TP salle5 (Forgeron)")
		case 'l':
			*currentMap = "salle7"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üé∞ TP salle7 (Casino)")
		case 'm':
			*currentMap = "salle12"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üó°Ô∏è TP salle12 (Mini-boss)")
		case 'n':
			*currentMap = "salle13"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üëë TP salle13")
		case 'o':
			*currentMap = "salle14"
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üî• TP salle14")
		case 'p':
			currentPlayer.Roches += 20
			addHUDMessage("ü™® +20 Roches d'√©volution")
		case 't':
			fmt.Print("Nom de la salle √† rejoindre: ")
			name := readLine()
			if name == "" {
				addHUDMessage("‚ö†Ô∏è Nom vide.")
				break
			}
			if _, ok := salles[name]; !ok {
				addHUDMessage("‚ùå Salle inconnue: " + name)
				break
			}
			*currentMap = name
			*mapData = copyMap(salles[*currentMap])
			applyDecorations(*currentMap, *mapData)
			applyCutTrees(*currentMap, *mapData)
			applyEnemyStates(*mapData, *currentMap)
			// spawn par d√©faut pr√®s du coin (2,2)
			placePlayerAt(*mapData, 2, 2)
			addHUDMessage("üß≠ TP vers " + name)
		case 'w':
			// Liste simple des cl√©s de 'salles'
			fmt.Println("Salles disponibles:")
			for k := range salles {
				fmt.Println(" -", k)
			}
		case 'q':
			addHUDMessage("Fermeture cheat menu.")
			return
		default:
			addHUDMessage("Entr√©e invalide cheat.")
		}
		// Mettre √† jour refs globales
		currentMapGlobalRef = *currentMap
		mapDataGlobalRef = *mapData
	}
}
