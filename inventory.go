package main

import (
	"fmt"
	"sort"
	"strings"

	"github.com/eiannone/keyboard"
)

// showInventoryMenu affiche un √©cran d'inventaire d√©taill√©. On reste dans cette vue
// tant que l'utilisateur ne presse pas I, ESC ou Entr√©e.
func showInventoryMenu(events <-chan keyboard.KeyEvent) {
	for {
		printInventoryScreen()
		// Attendre une touche utilisateur (drain r√©p√©titions)
		e := <-events
		draining := true
		for draining {
			select {
			case next := <-events:
				e = next
			default:
				draining = false
			}
		}
		input := strings.ToLower(string(e.Rune))
		if input == "i" || e.Key == keyboard.KeyEsc || e.Key == keyboard.KeyEnter {
			return
		}
	}
}

func printInventoryScreen() {
	fmt.Print("\033[H\033[2J")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("üéí                    INVENTAIRE DU JOUEUR                   üéí")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

	// Section ressources & cl√©s
	fmt.Println("üì¶ RESSOURCES")
	fmt.Printf("   üí∞ Pi√®ces:          %d\n", playerInventory["pi√®ces"])
	fmt.Printf("   üîë Cl√©s:            %d\n", playerInventory["cl√©s"])
	fmt.Printf("   üóùÔ∏è Cl√©s sp√©ciales:  %d\n", playerInventory["cl√©s_sp√©ciales"])
	fmt.Printf("   ‚õèÔ∏è Pioche:          %d\n", playerInventory["pioche"])
	fmt.Printf("   ü™® Roches √©vol.:    %d\n", currentPlayer.Roches)
	fmt.Printf("   ‚öîÔ∏è √âp√©es:           %d\n", playerInventory["√©p√©es"])
	fmt.Println()

	// Section consommables
	fmt.Println("üß™ CONSOMMABLES")
	fmt.Printf("   Potions:            %d\n", playerInventory["potions"])
	fmt.Printf("   Puff 9K:            %d\n", playerInventory["puff_9k"])
	fmt.Println()

	// Arme & Armure √©quip√©es (vue rapide)
	weaponName := "Aucune"
	if currentPlayer.ArmeEquipee.Nom != "" {
		weaponName = currentPlayer.ArmeEquipee.Nom
	} else if currentPlayer.NiveauArme >= 0 && currentPlayer.NiveauArme < len(currentPlayer.ArmesDisponibles) {
		weaponName = currentPlayer.ArmesDisponibles[currentPlayer.NiveauArme].Nom
	}
	armorName := "Aucune"
	if currentPlayer.ArmureEquipee.Nom != "" {
		armorName = currentPlayer.ArmureEquipee.Nom
	} else if currentPlayer.NiveauArmure >= 0 && currentPlayer.NiveauArmure < len(currentPlayer.ArmuresDisponibles) {
		armorName = currentPlayer.ArmuresDisponibles[currentPlayer.NiveauArmure].Nom
	}
	fmt.Println("üõ°Ô∏è √âQUIPEMENT")
	fmt.Printf("   Arme actuelle:      %s\n", weaponName)
	fmt.Printf("   Armure actuelle:    %s\n", armorName)
	if playerStats.hasLegendaryWeapon {
		fmt.Println("   üåü Arme l√©gendaire active: Excalibur")
	}
	fmt.Println()

	// Artefacts √©quip√©s
	fmt.Println("üßø ARTEFACTS")
	artNames := []string{}
	for _, a := range currentPlayer.ArtefactsEquipes {
		if a != nil {
			artNames = append(artNames, a.Nom)
		}
	}
	if len(artNames) == 0 {
		fmt.Println("   Aucun artefact √©quip√©")
	} else {
		// Tri pour affichage stable
		sort.Strings(artNames)
		for _, n := range artNames {
			fmt.Printf("   ‚Ä¢ %s\n", n)
		}
	}
	fmt.Println()

	fmt.Printf("‚ò†Ô∏è  Ennemis tu√©s au total: %d\n", playerStats.enemiesKilled)
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Println("(Appuyez sur I, ESC ou Entr√©e pour revenir au jeu)")
}
